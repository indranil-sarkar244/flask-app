CREATE AND ACTIVATE VIRTUAL ENVIOURNMENT :

create and open folder in vs code 
to create virtual enviournment run "pip install virtualenv" this command in terminal 
then run "virtualenv env" and done you have succesfully created your  virtual enviourment named env in your particular folder
now  question is why should we create virtual enviourment 

suppose you have installed the main python system in your computer now whatever you will do with your python scripts 
you don't want to affect the main system or main virtual enviourment let's suppose you want to install a package of 1.1 
version for this course and 1.8 version for another coursre but at a time only one version can be installed in your system  so 
you have created here a copy or instance  of main virtual enviourment so 1.1 version will not install in your main system 
instead it will be installed in your copied virtual enviourment  then you can also install the 1.8 version later in your main system
 or any other copied virtual enviourment 


 Now to execute your scripts in  virtual enviourment run " Set-ExecutionPolicy unrestricted " this command in your terminal 
 if it throws error then open terminal as administrator run "Set-ExecutionPolicy unrestricted " this command again and then click for yes 

 and done now you can run any scripts in your virtual enviourment

 now its time to activate your virtual enviourment for this 
run ".\env\Scripts\activate.ps1" this command in your terminal and done you have succesfully activated your virtual enviournment 


INSTALL FLASK :

Now to install flask run "pip install flask" in your terminal and done you have installed flask  


INSTALL SQLALCHEMY :

run "pip install flask-sqlalchemy" this command in your terminal 

CREATE DATABASE :

first write  "python" and enter in terminal then  " from app import db " this command in your terminal then press enter 
then write " db.create_all() " this command and press enter and done you will see a database file has been created 
in your directory




Great! Now that you're signed in to GitHub, let's push your Flask project to a GitHub repository so you can deploy it on Render.

Step 1: Create a New GitHub Repository
Go to GitHub and log in if you aren't already.
Click the "+" icon in the top right corner, then select "New repository".
Name your repository (e.g., "flask-app").
Leave it as Public and don’t check any boxes (like README or .gitignore).
Click Create repository.
Step 2: Set Up Git Locally
Now that you've created a repository, let's link it to your local project and push your files.

Open Git Bash (or use the terminal in VS Code).

Navigate to your Flask project directory (replace the path with your project location):

bash
Copy code
cd C:/Users/hp/Desktop/Flask
Initialize Git if you haven’t done it yet:

bash
Copy code
git init
Add your project files to Git:

bash
Copy code
git add .
Commit your changes:

bash
Copy code
git commit -m "Initial commit"
Link your GitHub repository to your local project:

bash
Copy code
git remote add origin https://github.com/your-username/flask-app.git
Replace your-username with your GitHub username and flask-app with your repository name.

Push your project to GitHub:

bash
Copy code
git push -u origin main
Step 3: Deploy to Render